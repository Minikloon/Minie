// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

description = 'demos, examples, and tests that do not generate reports'

dependencies {
    implementation 'com.github.stephengold:Heart:' + heartVersion
    implementation 'com.github.stephengold:jme3-utilities-ui:' + jme3utilitiesuiVersion
    runtimeOnly 'org.jmonkeyengine:jme3-desktop:' + jmonkeyengineVersion
    implementation 'org.jmonkeyengine:jme3-effects:' + jmonkeyengineVersion
    implementation 'org.jmonkeyengine:jme3-plugins:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-testdata:3.1.0-stable'

    // select one version of LWJGL (from jcenter or mavenLocal)
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl:' + jmonkeyengineVersion  // LWJGL 2.x
    //runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jmonkeyengineVersion  // LWJGL 3.x

    // MinieExamples doesn't use jme3-blender or jme3-jogg
    //  -- they are included solely to avoid warnings from AssetConfig
    runtimeOnly "org.jmonkeyengine:jme3-blender:$jmonkeyengineVersion"
    runtimeOnly "org.jmonkeyengine:jme3-jogg:$jmonkeyengineVersion"

    //implementation 'junit:junit:4.12'

    //implementation "jme3utilities:Minie:$minieVersion"
    implementation project(':MinieLibrary')
}

processResources.dependsOn(':MinieAssets:models', ':MinieAssets:shapes', ':MinieAssets:textures')

// cleanup tasks
clean.dependsOn(':MinieAssets:cleanModels', ':MinieAssets:cleanShapes', ':MinieAssets:cleanTextures')
clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs', 'cleanWrittenAssets')

task cleanDLLs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dll')
}
task cleanDyLibs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dylib')
}
task cleanLogs(type: Delete) {
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
task cleanSOs(type: Delete) {
    delete fileTree(dir: '.', include: '*.so')
}
task cleanWrittenAssets(type: Delete) {
    delete 'Written Assets'
}