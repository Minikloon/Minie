package vhacd.vhacd_native;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class VHACDNativeParameters extends Structure {
	public double m_concavity;
	public double m_alpha;
	public double m_beta;
	public double m_gamma;
	public double m_minVolumePerCH;
	public int m_resolution;
	public int m_maxNumVerticesPerCH;
	public int m_depth;
	public int m_planeDownsampling;
	public int m_convexhullDownsampling;
	public int m_pca;
	public int m_mode;
	public int m_convexhullApproximation;
	public int m_oclAcceleration;
	public VHACDNativeParameters() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("m_concavity", "m_alpha", "m_beta", "m_gamma", "m_minVolumePerCH", "m_resolution", "m_maxNumVerticesPerCH", "m_depth", "m_planeDownsampling", "m_convexhullDownsampling", "m_pca", "m_mode", "m_convexhullApproximation", "m_oclAcceleration");
	}
	public VHACDNativeParameters(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends VHACDNativeParameters implements Structure.ByReference {
		
	};
	public static class ByValue extends VHACDNativeParameters implements Structure.ByValue {
		
	};
}
