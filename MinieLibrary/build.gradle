// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

plugins {
    id 'java-library'
    id 'maven-publish'
}

description = 'the Minie physics library for jMonkeyEngine'
ext {
    // Specify the URL from which native libraries should be copied:

    libbulletjmeUrl = 'https://github.com/stephengold/Libbulletjme/releases/download/8.0.0/'
    //libbulletjmeUrl = 'file:///home/sgold/Git/Libbulletjme/dist/' // test an unreleased build

    // Specify the BTF (buildType + flavor) of native library for each platform:
    // (Specify '' for no native library.)

    if (gradle.rootProject.hasProperty('btdebug')) {
        // -Pbtdebug specified on the command line
        if (gradle.rootProject.hasProperty('dp')) {
            // both -Pbtdebug and -Pdp specified
            configureAndroidBtfs('')
            configureDesktopBtfs('DebugDp')
            metadata = 'debugdp' + jmeTarget

        } else { // -Pbtdebug specified, but not -Pdp
            configureAndroidBtfs('DebugSp')
            configureDesktopBtfs('DebugSp')
            metadata = 'debug' + jmeTarget
        }

    } else if (gradle.rootProject.hasProperty('dp')) {
        // -Pdp specified, but not -Pbtdebug
        configureAndroidBtfs('')
        configureDesktopBtfs('ReleaseDp')
        metadata = 'dp' + jmeTarget

    } else { // neither -Pbtdebug nor -Pdp specified
        btfAndroid_ARM7 = 'ReleaseSp'
        btfAndroid_ARM8 = 'ReleaseSp'
        btfAndroid_X86 = 'ReleaseSp'
        btfAndroid_X86_64 = 'ReleaseSp'
        btfLinux32 = 'ReleaseSp'
        btfLinux64 = 'ReleaseSp'
        btfLinux_ARM64 = 'ReleaseSp'
        btfMacOSX32 = 'ReleaseSp'
        btfMacOSX64 = 'ReleaseSp'
        btfWindows32 = 'ReleaseSp'
        btfWindows64 = 'ReleaseSp'
        metadata = jmeTarget
    }

    artifact = 'Minie'

    if (metadata.equals('')) {
        version = minieVersion
    } else {
        version = "$minieVersion+$metadata"
    }
    baseName = "${artifact}-${version}" // for POM and class JAR

    if (jmeTarget.equals('')) {
        srcVersion = minieVersion
    } else {
        srcVersion = "$minieVersion+$jmeTarget"
    }
    srcBaseName = "${artifact}-${srcVersion}" // for javadoc JAR and sources JAR

    resourcesDir = 'src/main/resources/'
    libDir = resourcesDir + 'lib/'       // for Android native libraries
    nativeDir = resourcesDir + 'native/' // for desktop native libraries
}

jar { archiveBaseName = project.ext.baseName }
javadocJar { archiveBaseName = project.ext.srcBaseName }
sourcesJar { archiveBaseName = project.ext.srcBaseName }

dependencies {
    api 'com.github.stephengold:Heart:' + heartVersion
    api 'org.jmonkeyengine:jme3-terrain:' + jmonkeyengineVersion

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.jmonkeyengine:jme3-desktop:' + jmonkeyengineVersion
    testRuntimeOnly 'org.jmonkeyengine:jme3-testdata:3.1.0-stable'
}

compileJava.options.headerOutputDirectory = new File('build/cpp')

test {
    failFast true // stop after first failure
    forkEvery 1  // don't run tests in parallel
    testLogging {
        events 'started', 'skipped', 'failed'
    }
}

processResources.dependsOn((btfAndroid_ARM7 == '' ? 'clean' : 'download') + 'Android_ARM7')
processResources.dependsOn((btfAndroid_ARM8 == '' ? 'clean' : 'download') + 'Android_ARM8')
processResources.dependsOn((btfAndroid_X86 == '' ? 'clean' : 'download') + 'Android_X86')
processResources.dependsOn((btfAndroid_X86_64 == '' ? 'clean' : 'download') + 'Android_X86_64')
processResources.dependsOn((btfLinux32 == '' ? 'clean' : 'download') + 'Linux32')
processResources.dependsOn((btfLinux64 == '' ? 'clean' : 'download') + 'Linux64')
processResources.dependsOn((btfLinux_ARM64 == '' ? 'clean' : 'download') + 'Linux_ARM64')
processResources.dependsOn((btfMacOSX32 == '' ? 'clean' : 'download') + 'MacOSX32')
processResources.dependsOn((btfMacOSX64 == '' ? 'clean' : 'download') + 'MacOSX64')
processResources.dependsOn((btfWindows32 == '' ? 'clean' : 'download') + 'Windows32')
processResources.dependsOn((btfWindows64 == '' ? 'clean' : 'download') + 'Windows64')

// tasks to download native libraries (from GitHub, typically)

task downloadAndroid_ARM7(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Android_ARM7${btfAndroid_ARM7}_libbulletjme.so"
    target = file(libDir + 'armeabi-v7a/libbulletjme.so')
}
task downloadAndroid_ARM8(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Android_ARM8${btfAndroid_ARM8}_libbulletjme.so"
    target = file(libDir + 'arm64-v8a/libbulletjme.so')
}
task downloadAndroid_X86(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Android_X86${btfAndroid_X86}_libbulletjme.so"
    target = file(libDir + 'x86/libbulletjme.so')
}
task downloadAndroid_X86_64(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Android_X86_64${btfAndroid_X86_64}_libbulletjme.so"
    target = file(libDir + 'x86_64/libbulletjme.so')
}
task downloadLinux32(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Linux32${btfLinux32}_libbulletjme.so"
    target = file(nativeDir + 'linux/x86/libbulletjme.so')
}
task downloadLinux64(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Linux64${btfLinux64}_libbulletjme.so"
    target = file(nativeDir + 'linux/x86_64/libbulletjme.so')
}
task downloadLinux_ARM64(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Linux_ARM64${btfLinux_ARM64}_libbulletjme.so"
    target = file(nativeDir + 'linux/arm64/libbulletjme.so')
}
task downloadMacOSX32(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "MacOSX32${btfMacOSX32}_libbulletjme.dylib"
    target = file(nativeDir + 'osx/x86/libbulletjme.dylib')
}
task downloadMacOSX64(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "MacOSX64${btfMacOSX64}_libbulletjme.dylib"
    target = file(nativeDir + 'osx/x86_64/libbulletjme.dylib')
}
task downloadWindows32(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Windows32${btfWindows32}_bulletjme.dll"
    target = file(nativeDir + 'windows/x86/bulletjme.dll')
}
task downloadWindows64(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Windows64${btfWindows64}_bulletjme.dll"
    target = file(nativeDir + 'windows/x86_64/bulletjme.dll')
}

// cleanup tasks
clean.dependsOn('cleanAndroid_ARM7', 'cleanAndroid_ARM8', 'cleanAndroid_X86',
    'cleanAndroid_X86_64', 'cleanLinux32', 'cleanLinux64', 'cleanLinux_ARM64',
    'cleanMacOSX32', 'cleanMacOSX64', 'cleanWindows32', 'cleanWindows64')

task cleanAndroid_ARM7(type: Delete) {
    delete libDir + 'armeabi-v7a/libbulletjme.so'
}
task cleanAndroid_ARM8(type: Delete) {
    delete libDir + 'arm64-v8a/libbulletjme.so'
}
task cleanAndroid_X86(type: Delete) {
    delete libDir + 'x86/libbulletjme.so'
}
task cleanAndroid_X86_64(type: Delete) {
    delete libDir + 'x86_64/libbulletjme.so'
}
task cleanLinux32(type: Delete) {
    delete nativeDir + 'linux/x86/libbulletjme.so'
}
task cleanLinux64(type: Delete) {
    delete nativeDir + 'linux/x86_64/libbulletjme.so'
}
task cleanLinux_ARM64(type: Delete) {
    delete nativeDir + 'linux/arm64/libbulletjme.so'
}
task cleanMacOSX32(type: Delete) {
    delete nativeDir + 'osx/x86/libbulletjme.dylib'
}
task cleanMacOSX64(type: Delete) {
    delete nativeDir + 'osx/x86_64/libbulletjme.dylib'
}
task cleanWindows32(type: Delete) {
    delete nativeDir + 'windows/x86/bulletjme.dll'
}
task cleanWindows64(type: Delete) {
    delete nativeDir + 'windows/x86_64/bulletjme.dll'
}

build.dependsOn('pom')
task('pom', type: Copy) {
    dependsOn 'generatePomFileForMavenPublication'
    from "${buildDir}/publications/maven/pom-default.xml"
    into "${buildDir}/libs"
    rename '.*', baseName + '.pom'
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId artifact
            from components.java
            pom {
                licenses {
                    license {
                        distribution = 'repo'
                        name = 'New BSD (3-clause) License'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
            }
            version project.ext.version
        }
    }
}

// helper class to wrap Ant download task
class MyDownload extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
        println sourceUrl
    }
}

// helper methods to configure native libraries

void configureAndroidBtfs(String btfValue) {
    project.ext.btfAndroid_ARM7 = btfValue
    project.ext.btfAndroid_ARM8 = btfValue
    project.ext.btfAndroid_X86 = btfValue
    project.ext.btfAndroid_X86_64 = btfValue
}

void configureDesktopBtfs(String btfValue) {
    project.ext.btfLinux32 = btfValue
    project.ext.btfLinux64 = btfValue
    project.ext.btfLinux_ARM64 = btfValue
    project.ext.btfMacOSX32 = btfValue
    project.ext.btfMacOSX64 = btfValue
    project.ext.btfWindows32 = btfValue
    project.ext.btfWindows64 = btfValue
}
