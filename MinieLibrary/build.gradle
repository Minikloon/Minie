// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

description = 'a physics library for jMonkeyEngine'
ext {
    // The URL from which native libraries should be copied:

    libbulletjmeUrl = 'https://github.com/stephengold/Libbulletjme/releases/download/12.6.0/'
    //libbulletjmeUrl = 'file:///home/sgold/Git/Libbulletjme/dist/' // to test a local build
    //libbulletjmeUrl = 'file:///c:\\users\\sgold\\Git\\Libbulletjme\\dist\\' // to test a local build

    pdbWindows64 = ''
    if (rootProject.hasProperty('btdebug')) {
        // -Pbtdebug specified on the command line

        if (rootProject.hasProperty('dp')) {
            // both -Pbtdebug and -Pdp specified

            configureAndroidBtfs('') // no DebugDp for Android yet
            configureDesktopBtfs('DebugDp')
            metadata = 'debugdp' + jmeTarget

        } else if (rootProject.hasProperty('pdb64')) {
            // both -Pbtdebug and -Ppdb64 specified, but not -Pdp

            configureAndroidBtfs('')
            configureDesktopBtfs('')
            btfWindows64 = 'DebugSp'
            pdbWindows64 = 'DebugSp'
            metadata = 'debug' + jmeTarget

        } else { // -Pbtdebug specified, but not -Pdp or -Ppdb64
            configureAndroidBtfs('DebugSp')
            configureDesktopBtfs('DebugSp')
            metadata = 'debug' + jmeTarget
        }

    } else if (rootProject.hasProperty('dp')) {
        // -Pdp specified, but not -Pbtdebug

        configureAndroidBtfs('')
        configureDesktopBtfs('ReleaseDp')
        metadata = 'dp' + jmeTarget

    } else if (rootProject.hasProperty('bare')) {
        // -Pbare specified, but neither -Pbtdebug nor -Pdp

        configureAndroidBtfs('')
        configureDesktopBtfs('')
        metadata = 'bare' + jmeTarget

    } else if (rootProject.hasProperty('big3')) {
        // -Pbig3 specified, but neither -Pbtdebug nor -Pdp nor -Pbare

        configureAndroidBtfs('')
        configureDesktopBtfs('')
        btfLinux64 = 'ReleaseSp'
        btfMacOSX64 = 'ReleaseSp'
        btfWindows64 = 'ReleaseSp'
        metadata = 'big3' + jmeTarget

    } else if (rootProject.hasProperty('mt')) {
        // -Pmt specified, but neither -Pbtdebug nor -Pdp nor -Pbare nor -Pbig3

        configureAndroidBtfs('')
        configureDesktopBtfs('')
        btfLinux64 = 'ReleaseSpMt'
        btfWindows64 = 'ReleaseSpMt'
        metadata = 'mt' + jmeTarget

    } else { // neither -Pbtdebug nor -Pdp nor -Pbare nor -Pbig3 nor -Pmt specified

        // Specify the BTF (buildType + flavor) of native library for each platform:
        // (Specify '' for no native library.)

        btfAndroid_ARM7 = 'ReleaseSp'
        btfAndroid_ARM8 = 'ReleaseSp'
        btfAndroid_X86 = 'ReleaseSp'
        btfAndroid_X86_64 = 'ReleaseSp'
        btfLinux32 = 'ReleaseSp'
        btfLinux64 = 'ReleaseSp'
        btfLinux_ARM32 = 'hfReleaseSp'
        btfLinux_ARM64 = 'ReleaseSp'
        btfMacOSX32 = ''
        btfMacOSX64 = 'ReleaseSp'
        btfWindows32 = 'ReleaseSp'
        btfWindows64 = 'ReleaseSp'

        metadata = jmeTarget
    }

    group = 'com.github.stephengold'
    artifact = 'Minie'

    if (metadata.isEmpty()) {
        version = minieVersion
    } else if (metadata.startsWith('+')) {
        version = minieVersion + metadata
    } else {
        version = "${minieVersion}+${metadata}"
    }
    baseName = "${artifact}-${version}${minieSnapshot}"

    websiteUrl = 'https://github.com/stephengold/Minie'

    resourcesDir = 'src/main/resources/'
    libDir = resourcesDir + 'lib/'       // for Android native libraries
    nativeDir = resourcesDir + 'native/' // for desktop native libraries
}

dependencies {
    api heartCoordinates
    api 'com.simsilica:sim-math:1.4.1'
    api 'org.jmonkeyengine:jme3-terrain:' + jme3Version

    testImplementation junitCoordinates
    testImplementation 'org.jmonkeyengine:jme3-desktop:' + jme3Version
    testImplementation 'org.jmonkeyengine:jme3-plugins:' + jme3Version
    testRuntimeOnly testdataCoordinates
}

test {
    failFast true // stop after first failure
    forkEvery 1  // don't run tests in parallel
    testLogging {
        events 'started', 'skipped', 'failed'
    }
}

processResources.dependsOn((btfAndroid_ARM7 == '' ? 'clean' : 'download') + 'Android_ARM7')
processResources.dependsOn((btfAndroid_ARM8 == '' ? 'clean' : 'download') + 'Android_ARM8')
processResources.dependsOn((btfAndroid_X86 == '' ? 'clean' : 'download') + 'Android_X86')
processResources.dependsOn((btfAndroid_X86_64 == '' ? 'clean' : 'download') + 'Android_X86_64')
processResources.dependsOn((btfLinux32 == '' ? 'clean' : 'download') + 'Linux32')
processResources.dependsOn((btfLinux64 == '' ? 'clean' : 'download') + 'Linux64')
processResources.dependsOn((btfLinux_ARM32 == '' ? 'clean' : 'download') + 'Linux_ARM32')
processResources.dependsOn((btfLinux_ARM64 == '' ? 'clean' : 'download') + 'Linux_ARM64')
processResources.dependsOn((btfMacOSX32 == '' ? 'clean' : 'download') + 'MacOSX32')
processResources.dependsOn((btfMacOSX64 == '' ? 'clean' : 'download') + 'MacOSX64')
processResources.dependsOn((btfWindows32 == '' ? 'clean' : 'download') + 'Windows32')
processResources.dependsOn((btfWindows64 == '' ? 'clean' : 'download') + 'Windows64')

assemble.dependsOn((pdbWindows64 == '' ? 'clean' : 'download') + 'PDBs')

// tasks to download native libraries (from GitHub, typically)

task downloadAndroid_ARM7(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Android_ARM7${btfAndroid_ARM7}_libbulletjme.so"
    target = file(libDir + 'armeabi-v7a/libbulletjme.so')
}
task downloadAndroid_ARM8(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Android_ARM8${btfAndroid_ARM8}_libbulletjme.so"
    target = file(libDir + 'arm64-v8a/libbulletjme.so')
}
task downloadAndroid_X86(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Android_X86${btfAndroid_X86}_libbulletjme.so"
    target = file(libDir + 'x86/libbulletjme.so')
}
task downloadAndroid_X86_64(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Android_X86_64${btfAndroid_X86_64}_libbulletjme.so"
    target = file(libDir + 'x86_64/libbulletjme.so')
}
task downloadLinux32(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Linux32${btfLinux32}_libbulletjme.so"
    target = file(nativeDir + 'linux/x86/libbulletjme.so')
}
task downloadLinux64(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Linux64${btfLinux64}_libbulletjme.so"
    target = file(nativeDir + 'linux/x86_64/libbulletjme.so')
}
task downloadLinux_ARM32(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Linux_ARM32${btfLinux_ARM32}_libbulletjme.so"
    target = file(nativeDir + 'linux/arm32/libbulletjme.so')
}
task downloadLinux_ARM64(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Linux_ARM64${btfLinux_ARM64}_libbulletjme.so"
    target = file(nativeDir + 'linux/arm64/libbulletjme.so')
}
task downloadMacOSX32(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "MacOSX32${btfMacOSX32}_libbulletjme.dylib"
    target = file(nativeDir + 'osx/x86/libbulletjme.dylib')
}
task downloadMacOSX64(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "MacOSX64${btfMacOSX64}_libbulletjme.dylib"
    target = file(nativeDir + 'osx/x86_64/libbulletjme.dylib')
}
task downloadWindows32(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Windows32${btfWindows32}_bulletjme.dll"
    target = file(nativeDir + 'windows/x86/bulletjme.dll')
}
task downloadWindows64(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Windows64${btfWindows64}_bulletjme.dll"
    target = file(nativeDir + 'windows/x86_64/bulletjme.dll')
}

task downloadPDBs(type: MyDownload) {
    sourceUrl = libbulletjmeUrl + "Windows64${pdbWindows64}_bulletjme.pdb"
    target = file('bulletjme.pdb')
}

// cleanup tasks

clean.dependsOn('cleanAndroid_ARM7', 'cleanAndroid_ARM8', 'cleanAndroid_X86',
    'cleanAndroid_X86_64', 'cleanLinux32', 'cleanLinux64',
    'cleanLinux_ARM32', 'cleanLinux_ARM64',
    'cleanMacOSX32', 'cleanMacOSX64', 'cleanWindows32', 'cleanWindows64')

task cleanAndroid_ARM7(type: Delete) {
    delete libDir + 'armeabi-v7a/libbulletjme.so'
}
task cleanAndroid_ARM8(type: Delete) {
    delete libDir + 'arm64-v8a/libbulletjme.so'
}
task cleanAndroid_X86(type: Delete) {
    delete libDir + 'x86/libbulletjme.so'
}
task cleanAndroid_X86_64(type: Delete) {
    delete libDir + 'x86_64/libbulletjme.so'
}
task cleanLinux32(type: Delete) {
    delete nativeDir + 'linux/x86/libbulletjme.so'
}
task cleanLinux64(type: Delete) {
    delete nativeDir + 'linux/x86_64/libbulletjme.so'
}
task cleanLinux_ARM32(type: Delete) {
    delete nativeDir + 'linux/arm32/libbulletjme.so'
}
task cleanLinux_ARM64(type: Delete) {
    delete nativeDir + 'linux/arm64/libbulletjme.so'
}
task cleanMacOSX32(type: Delete) {
    delete nativeDir + 'osx/x86/libbulletjme.dylib'
}
task cleanMacOSX64(type: Delete) {
    delete nativeDir + 'osx/x86_64/libbulletjme.dylib'
}
task cleanWindows32(type: Delete) {
    delete nativeDir + 'windows/x86/bulletjme.dll'
}
task cleanWindows64(type: Delete) {
    delete nativeDir + 'windows/x86_64/bulletjme.dll'
}

// javadoc to (web)site tasks, triggered by push-master.yml

task('copyJavadocToSite') {
    dependsOn 'copyMasterJavadocToSite', \
     'copy44JavadocToSite', \
     'copy43JavadocToSite', \
     'copy42JavadocToSite', \
     'copy41JavadocToSite', \
     'copy40JavadocToSite', \
     'copy31JavadocToSite', \
     'copy30JavadocToSite', \
     'copy20JavadocToSite'
}
task('copyMasterJavadocToSite', type: Copy) {
    dependsOn 'javadoc'
    from "${buildDir}/docs/javadoc"
    into '../build/site/javadoc/master'
}
defineJavadocTasksForRelease('4', '4', '0')
defineJavadocTasksForRelease('4', '3', '0')
defineJavadocTasksForRelease('4', '2', '0')
defineJavadocTasksForRelease('4', '1', '1')
defineJavadocTasksForRelease('4', '0', '2')
defineJavadocTasksForRelease('3', '1', '0')
defineJavadocTasksForRelease('3', '0', '0')
defineJavadocTasksForRelease('2', '0', '1')

// publishing tasks

task('install') {
    dependsOn 'publishMavenPublicationToMavenLocal'
    description 'Installs Maven artifacts to the local repository.'
}
task('release') {
    dependsOn 'publishMavenPublicationToOSSRHRepository'
    description 'Stages Maven artifacts to Sonatype OSSRH.'
}

jar {
    archiveBaseName = project.ext.baseName
}
task javadocJar(type: Jar) {
    archiveBaseName = project.ext.baseName
    archiveClassifier = 'javadoc'
    dependsOn 'javadoc'
    description 'Creates a JAR of javadoc.'
    from javadoc.destinationDir
}
task sourcesJar(type: Jar) {
    archiveBaseName = project.ext.baseName
    archiveClassifier = 'sources'
    description 'Creates a JAR of sourcecode.'
    from sourceSets.main.allJava
}

build.dependsOn('pom', 'pomAsc')
task('pom', type: Copy) {
    dependsOn 'generatePomFileForMavenPublication'
    description 'Copies the Maven POM to build/libs.'
    from "${buildDir}/publications/maven/pom-default.xml"
    into "${buildDir}/libs"
    rename 'pom-default.xml', project.ext.baseName + '.pom'
}
task('pomAsc', type: Copy) {
    dependsOn 'signMavenPublication'
    description 'Copies the signature of the Maven POM to build/libs.'
    from "${buildDir}/publications/maven/pom-default.xml.asc"
    into "${buildDir}/libs"
    rename 'pom-default.xml.asc', project.ext.baseName + '.pom.asc'
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact javadocJar
            artifact sourcesJar
            artifactId artifact
            from components.java
            groupId project.ext.group
            pom {
                description = project.description
                developers {
                    developer {
                        email = 'sgold@sonic.net'
                        name = 'Stephen Gold'
                    }
                }
                licenses {
                    license {
                        distribution = 'repo'
                        name = 'New BSD (3-clause) License'
                        url = 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }
                name = project.ext.group + ':' + artifact
                scm {
                    connection = 'scm:git:git://github.com/stephengold/Minie.git'
                    developerConnection = 'scm:git:ssh://github.com:stephengold/Minie.git'
                    url = project.ext.websiteUrl + '/tree/master'
                }
                url = project.ext.websiteUrl
            }
            version project.ext.version + project.ext.minieSnapshot
        }
    }
    // Staging to OSSRH relies on the existence of 2 properties
    // (ossrhUsername and ossrhPassword)
    // which should be stored in ~/.gradle/gradle.properties
    repositories {
        maven {
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : 'Unknown user'
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : 'Unknown password'
            }
            name = 'OSSRH'
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
        }
    }
}
generateMetadataFileForMavenPublication.dependsOn('pom')
publishMavenPublicationToMavenLocal.doLast {
    println 'installed locally as ' + project.ext.baseName
}

// signing tasks

// Signing relies on the existence of 3 properties
// (signing.keyId, signing.password, and signing.secretKeyRingFile)
// which should be stored in ~/.gradle/gradle.properties

signing {
    sign publishing.publications.maven
}
tasks.withType(Sign) {
    onlyIf { rootProject.hasProperty('signing.keyId') }
}

// helper class to wrap Ant download task

class MyDownload extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
        println sourceUrl
    }
}

// helper methods to configure native libraries

void configureAndroidBtfs(String btfValue) {
    project.ext.btfAndroid_ARM7 = btfValue
    project.ext.btfAndroid_ARM8 = btfValue
    project.ext.btfAndroid_X86 = btfValue
    project.ext.btfAndroid_X86_64 = btfValue
}

void configureDesktopBtfs(String btfValue) {
    project.ext.btfLinux32 = btfValue
    if (btfValue.isEmpty()) {
        project.ext.btfLinux64 = ''
        project.ext.btfLinux_ARM32 = ''
        project.ext.btfWindows64 = ''
    } else {
        project.ext.btfLinux64 = btfValue
        project.ext.btfLinux_ARM32 = 'hf' + btfValue
        project.ext.btfWindows64 = btfValue
    }
    project.ext.btfLinux_ARM64 = btfValue
    project.ext.btfMacOSX32 = ''
    project.ext.btfMacOSX64 = btfValue
    project.ext.btfWindows32 = btfValue
}

// helper method to define tasks that copy javadoc to the (web)site

void defineJavadocTasksForRelease(String major, String minor, String patch) {
    String downloadTaskName = "download${major}${minor}Javadoc"
    String downloadUrl = 'https://github.com/stephengold/Minie/releases/download'
    String jarPath = "${buildDir}/docs/v${major}-${minor}.jar"
    String mmp = "${major}.${minor}.${patch}"

    task(downloadTaskName, type: MyDownload) {
        sourceUrl = "${downloadUrl}/${mmp}/Minie-${mmp}-javadoc.jar"
        target = file(jarPath)
    }

    task("copy${major}${minor}JavadocToSite", type: Copy) {
        dependsOn downloadTaskName
        from zipTree(jarPath)
        into "../build/site/javadoc/v${major}-${minor}"
    }
}
