// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

description = 'Generate assets used in MinieExamples.'
ext {
    // output directories
    assets = '../MinieExamples/src/main/resources/'
    glyphAssets = assets + 'CollisionShapes/glyphs/'
    poolBalls = assets + 'Textures/poolBalls/'

    // output directories for C-G models
    baseMesh = assets + 'Models/BaseMesh'
    candyDish = assets + 'Models/CandyDish'
    duck = assets + 'Models/Duck'
    elephant = assets + 'Models/Elephant'
    jaime = assets + 'Models/Jaime'
    mhGame = assets + 'Models/MhGame'
    ninja = assets + 'Models/Ninja'
    oto = assets + 'Models/Oto'
    sinbad = assets + 'Models/Sinbad'

    // generated collision-shape J3O files
    ankhShape = assets + 'CollisionShapes/ankh.j3o'
    bananaShape = assets + 'CollisionShapes/banana.j3o'
    barrelShape = assets + 'CollisionShapes/barrel.j3o'
    bowlingPinShape = assets + 'CollisionShapes/bowlingPin.j3o'
    duckShape = assets + 'CollisionShapes/duck.j3o'
    heartShape = assets + 'CollisionShapes/heart.j3o'
    horseshoeShape = assets + 'CollisionShapes/horseshoe.j3o'
    swordShape = assets + 'CollisionShapes/sword.j3o'
    teapotShape = assets + 'CollisionShapes/teapot.j3o'

    // generated texture files
    greenTile = assets + 'Textures/greenTile.png'
    plaid = assets + 'Textures/plaid.png'
}

tasks.withType(JavaCompile) { // Java compile-time options:
    options.deprecation = true
}

dependencies {
    implementation 'com.github.stephengold:jme-ttf:2.2.4' + jmeTarget
    implementation 'com.github.stephengold:Heart:' + heartVersion
    implementation 'org.jmonkeyengine:jme3-blender:3.3.2-stable'
    implementation 'org.jmonkeyengine:jme3-desktop:' + jmonkeyengineVersion
    implementation 'org.jmonkeyengine:jme3-effects:' + jmonkeyengineVersion
    implementation 'org.jmonkeyengine:jme3-plugins:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-testdata:3.1.0-stable'

    // MinieAssets doesn't use jme3-jogg.
    // It is included solely to avoid a warning from AssetConfig.
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jmonkeyengineVersion

    //implementation 'com.github.stephengold:Minie:' + minieVersion
    implementation project(':MinieLibrary')
}

task models(type: JavaExec) {
    description 'Generate C-G model assets used in MinieExamples.'
    mainClass = 'jme3utilities.minie.test.models.ImportCgms'
    outputs.files([
            baseMesh + '/BaseMesh.j3o',
            candyDish + '/CandyDish.j3o',
            duck + '/Duck.j3o',
            elephant + '/Elephant.j3o',
            jaime + '/Jaime-new.j3o',
            mhGame + '/MhGame.j3o',
            ninja + '/Ninja.j3o',
            oto + '/Oto.j3o',
            sinbad + '/Sinbad.j3o',
            sinbad + '/Sword.j3o'
        ])
}

task shapes {
    dependsOn 'ankhShape', 'bananaShape', 'barrelShape', 'bowlingPinShape', \
        'duckShape', 'glyphShapes', 'heartShape', 'horseshoeShape', \
        'swordShape', 'teapotShape'
    description 'Generate collision-shape assets used in MinieExamples.'
}
task ankhShape(type: JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeAnkh'
    outputs.files([ankhShape])
}
task bananaShape(type: JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeBanana'
    outputs.files([bananaShape])
}
task barrelShape(type: JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeBarrel'
    outputs.files([barrelShape])
}
task bowlingPinShape(type: JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeBowlingPin'
    outputs.files([bowlingPinShape])
}
task duckShape(type: JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeDuck'
    outputs.files([duckShape])
}
task glyphShapes(type: JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeGlyphs'
    outputs.dirs([glyphAssets])
}
task heartShape(type: JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeHeart'
    outputs.files([heartShape])
}
task horseshoeShape(type: JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeHorseshoe'
    outputs.files([horseshoeShape])
}
task swordShape(type: JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeSword'
    outputs.files([swordShape])
}
task teapotShape(type: JavaExec) {
    mainClass = 'jme3utilities.minie.test.shapes.MakeTeapot'
    outputs.files([teapotShape])
}

task textures {
    dependsOn 'greenTile', 'plaid', 'poolBalls'
    description 'Generate texture assets used in MinieExamples.'
}
task greenTile(type: JavaExec) {
    mainClass = 'jme3utilities.minie.test.textures.MakeGreenTile'
    outputs.files([greenTile])
}
task plaid(type: JavaExec) {
    mainClass = 'jme3utilities.minie.test.textures.MakePlaid'
    outputs.files([plaid])
}
task poolBalls(type: JavaExec) {
    mainClass = 'jme3utilities.minie.test.textures.MakePoolBalls'
    outputs.dirs([poolBalls])
}

// cleanup tasks
clean.dependsOn('cleanModels', 'cleanShapes', 'cleanTextures')

task cleanModels(type: Delete) {
    delete(baseMesh, candyDish, duck, elephant, jaime, mhGame, ninja, sinbad)
    dependsOn 'cleanOto'
    description 'Delete generated model assets.'
}
task cleanOto(type: Delete) {
    delete fileTree(dir: oto, include: 'Oto.*')
}

task cleanShapes {
    dependsOn 'cleanAnkhShape', 'cleanBananaShape', 'cleanBarrelShape', \
        'cleanBowlingPinShape', 'cleanDuckShape', 'cleanGlyphShapes', \
        'cleanHeartShape', 'cleanHorseshoeShape', 'cleanSwordShape', \
        'cleanTeapotShape'
    description 'Delete generated collision-shape assets.'
}
task cleanAnkhShape(type: Delete) {
    delete ankhShape
}
task cleanBananaShape(type: Delete) {
    delete bananaShape
}
task cleanBarrelShape(type: Delete) {
    delete barrelShape
}
task cleanBowlingPinShape(type: Delete) {
    delete bowlingPinShape
}
task cleanDuckShape(type: Delete) {
    delete duckShape
}
task cleanGlyphShapes(type: Delete) {
    delete glyphAssets
}
task cleanHeartShape(type: Delete) {
    delete heartShape
}
task cleanHorseshoeShape(type: Delete) {
    delete horseshoeShape
}
task cleanSwordShape(type: Delete) {
    delete swordShape
}
task cleanTeapotShape(type: Delete) {
    delete teapotShape
}

task cleanTextures(type: Delete) {
    delete(greenTile, plaid, poolBalls)
    description 'Delete generated texture assets.'
}
