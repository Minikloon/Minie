// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

description = 'Generate assets used in MinieExamples.'
ext {
    assets = '../MinieExamples/src/main/resources/'

    candyDish = assets + 'Models/CandyDish'
    duck = assets + 'Models/Duck'
    elephant = assets + 'Models/Elephant'
    mhGame = assets + 'Models/MhGame'
    ninja = assets + 'Models/Ninja'
    oto = assets + 'Models/Oto'
    sinbad = assets + 'Models/Sinbad'

    plaid = assets + 'Textures/plaid.png'
    torus = assets + 'CollisionShapes/torus.j3o'
}

dependencies {
    implementation "jme3utilities:jme3-utilities-heart:$heartVersion"
    runtimeOnly "org.jmonkeyengine:jme3-blender:$jmonkeyengineVersion"
    implementation "org.jmonkeyengine:jme3-desktop:$jmonkeyengineVersion"
    runtimeOnly "org.jmonkeyengine:jme3-jogg:$jmonkeyengineVersion"
    runtimeOnly "org.jmonkeyengine:jme3-lwjgl:$jmonkeyengineVersion"
    implementation "org.jmonkeyengine:jme3-plugins:$jmonkeyengineVersion"
    runtimeOnly 'org.jmonkeyengine:jme3-testdata:3.1.0-stable'

    //implementation "jme3utilities:Minie:$minieVersion"
    implementation project(':MinieLibrary')
}

task collisionShapes {
    dependsOn 'torus'
    description 'Generate collision-shape assets used in MinieExamples.'
}
task torus(type: JavaExec) {
    main 'jme3utilities.minie.test.shapes.MakeTorus'
    outputs.files([torus])
}

task models(type: JavaExec) {
    description 'Generate model assets used in MinieExamples.'
    main 'jme3utilities.minie.test.models.ImportCgms'
    outputs.files([
            candyDish + '/CandyDish.j3o',
            duck + '/Duck.j3o',
            elephant + '/Elephant.j3o',
            mhGame + '/MhGame.j3o',
            ninja + '/Ninja.j3o',
            oto + '/Oto.j3o',
            sinbad + '/Sinbad.j3o'
        ])
}

task textures {
    dependsOn 'plaid'
    description 'Generate texture assets used in MinieExamples.'
}
task plaid(type: JavaExec) {
    main 'jme3utilities.minie.test.textures.MakePlaid'
    outputs.files([plaid])
}

// cleanup tasks
clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanSOs')
clean.dependsOn('cleanModels', 'cleanTextures')

task cleanDLLs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dll')
}
task cleanDyLibs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dylib')
}
task cleanLogs(type: Delete) {
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
task cleanSOs(type: Delete) {
    delete fileTree(dir: '.', include: '*.so')
}
task cleanTextures(type: Delete) {
    delete assets + 'Textures'
}
task cleanModels(type: Delete) {
    delete(candyDish, duck, elephant, mhGame, ninja, sinbad)
    dependsOn 'cleanOto'
    description 'Delete generated model assets.'
}
task cleanOto(type: Delete) {
    delete fileTree(dir: oto, include: 'Oto.*')
}
