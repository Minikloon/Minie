// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

description = 'Generate assets used in MinieExamples.'
ext {
    assets = '../MinieExamples/src/main/resources/'
    glyphAssets = assets + 'CollisionShapes/glyphs/'

    candyDish = assets + 'Models/CandyDish'
    duck = assets + 'Models/Duck'
    elephant = assets + 'Models/Elephant'
    mhGame = assets + 'Models/MhGame'
    ninja = assets + 'Models/Ninja'
    oto = assets + 'Models/Oto'
    sinbad = assets + 'Models/Sinbad'

    duckShape = assets + 'CollisionShapes/duck.j3o'
    heartShape = assets + 'CollisionShapes/heart.j3o'
    swordShape = assets + 'CollisionShapes/sword.j3o'
    teapotShape = assets + 'CollisionShapes/teapot.j3o'

    plaid = assets + 'Textures/plaid.png'
}

dependencies {
    implementation 'com.atr:jme-ttf:2.2.2'
    implementation 'com.github.stephengold:Heart:' + heartVersion
    runtimeOnly "org.jmonkeyengine:jme3-blender:$jmonkeyengineVersion"
    implementation 'org.jmonkeyengine:jme3-desktop:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-jogg:' + jmonkeyengineVersion
    implementation 'org.jmonkeyengine:jme3-plugins:' + jmonkeyengineVersion
    runtimeOnly 'org.jmonkeyengine:jme3-testdata:3.1.0-stable'

    // select one version of LWJGL (from jcenter or mavenLocal)
    runtimeOnly 'org.jmonkeyengine:jme3-lwjgl:' + jmonkeyengineVersion // LWJGL 2.x
    //runtimeOnly 'org.jmonkeyengine:jme3-lwjgl3:' + jmonkeyengineVersion // LWJGL 3.x

    //implementation 'jme3utilities:Minie:' + minieVersion
    implementation project(':MinieLibrary')
}

task models(type: JavaExec) {
    description 'Generate model assets used in MinieExamples.'
    main 'jme3utilities.minie.test.models.ImportCgms'
    outputs.files([
            candyDish + '/CandyDish.j3o',
            duck + '/Duck.j3o',
            elephant + '/Elephant.j3o',
            mhGame + '/MhGame.j3o',
            ninja + '/Ninja.j3o',
            oto + '/Oto.j3o',
            sinbad + '/Sinbad.j3o'
        ])
}

task shapes {
    dependsOn 'duckShape', 'glyphShapes', 'heartShape', 'swordShape', 'teapotShape'
    description 'Generate collision-shape assets used in MinieExamples.'
}
task duckShape(type: JavaExec) {
    main 'jme3utilities.minie.test.shapes.MakeDuck'
    outputs.files([duckShape])
}
task glyphShapes(type: JavaExec) {
    main 'jme3utilities.minie.test.shapes.MakeGlyphs'
    outputs.dirs([glyphAssets])
}
task heartShape(type: JavaExec) {
    main 'jme3utilities.minie.test.shapes.MakeHeart'
    outputs.files([heartShape])
}
task swordShape(type: JavaExec) {
    main 'jme3utilities.minie.test.shapes.MakeSword'
    outputs.files([swordShape])
}
task teapotShape(type: JavaExec) {
    main 'jme3utilities.minie.test.shapes.MakeTeapot'
    outputs.files([teapotShape])
}

task textures {
    dependsOn 'plaid'
    description 'Generate texture assets used in MinieExamples.'
}
task plaid(type: JavaExec) {
    main 'jme3utilities.minie.test.textures.MakePlaid'
    outputs.files([plaid])
}

// cleanup tasks
clean.dependsOn('cleanModels', 'cleanShapes', 'cleanTextures')

task cleanModels(type: Delete) {
    delete(candyDish, duck, elephant, mhGame, ninja, sinbad)
    dependsOn 'cleanOto'
    description 'Delete generated model assets.'
}
task cleanOto(type: Delete) {
    delete fileTree(dir: oto, include: 'Oto.*')
}

task cleanShapes {
    dependsOn 'cleanDuckShape', 'cleanGlyphShapes', 'cleanHeartShape', 'cleanSwordShape', 'cleanTeapotShape'
    description 'Delete generated shape assets.'
}
task cleanDuckShape(type: Delete) {
    delete(duckShape)
}
task cleanGlyphShapes(type: Delete) {
    delete glyphAssets
}
task cleanHeartShape(type: Delete) {
    delete(heartShape)
}
task cleanSwordShape(type: Delete) {
    delete(swordShape)
}
task cleanTeapotShape(type: Delete) {
    delete(teapotShape)
}
