// Gradle settings and tasks common to all Minie subprojects

apply plugin: 'checkstyle'
apply plugin: 'java'

ext {
    jmeTarget = '' // distinguish libraries built for different JME releases

    // module coordinates of dependencies:
    acorusCoordinates = 'com.github.stephengold:Acorus:0.9.16' + jmeTarget
    heartCoordinates = 'com.github.stephengold:Heart:8.0.0' + jmeTarget
    junitCoordinates = 'junit:junit:4.13.2'
    testdataCoordinates = 'org.jmonkeyengine:jme3-testdata:3.1.0-stable'
    wesCoordinates = 'com.github.stephengold:Wes:0.7.2' + jmeTarget

    // current versions of libraries:
    jme3Version = '3.5.2-stable'
    minieVersion = '4.9.1'
    minieSnapshot = '-SNAPSHOT' // to distinguish development builds from releases
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(JavaCompile) { // Java compile-time options:
    options.compilerArgs << '-Xdiags:verbose'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
        // Suppress warnings that source value 7 is obsolete.
        options.compilerArgs << '-Xlint:-options'
    }
    options.compilerArgs << '-Xlint:unchecked'
    //options.deprecation = true // to provide detailed deprecation warnings
    options.encoding = 'UTF-8'
    if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_10)) {
        options.release = 8
    }
}

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform
Boolean isMacOS = DefaultNativePlatform.currentOperatingSystem.isMacOsX()

tasks.withType(JavaExec) { // Java runtime options:
    if (isMacOS) {
        jvmArgs '-XstartOnFirstThread'
    } else {
        args '--showSettingsDialog'
    }
    //args '--verbose' // to enable additional log output
    classpath sourceSets.main.runtimeClasspath
    enableAssertions true
    //jvmArgs '-verbose:gc'
    //jvmArgs '-Xcheck:jni'
    jvmArgs '-Xms1024m', '-Xmx1024m'
    jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
}

repositories {
    //mavenLocal() // to find local snapshots of libraries
    mavenCentral()
}

// cleanup tasks:

clean.dependsOn('cleanDLLs', 'cleanDyLibs', 'cleanLogs', 'cleanPDBs', \
    'cleanSandbox', 'cleanSOs')

tasks.register('cleanDLLs', Delete) { // extracted Windows native libraries
    delete fileTree(dir: '.', include: '*.dll')
}
tasks.register('cleanDyLibs', Delete) { // extracted macOS native libraries
    delete fileTree(dir: '.', include: '*.dylib')
}
tasks.register('cleanLogs', Delete) { // JVM crash logs
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
tasks.register('cleanPDBs', Delete) { // Windows program database files
    delete fileTree(dir: '.', include: '*.pdb')
}
tasks.register('cleanSandbox', Delete) { // Acorus output directory
    delete 'Written Assets'
}
tasks.register('cleanSOs', Delete) { // extracted Linux and Android native libraries
    delete fileTree(dir: '.', include: '*.so')
}
